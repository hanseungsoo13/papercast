name: Daily Podcast Generation

on:
  schedule:
    # Run every day at 6:00 AM KST (21:00 UTC)
    - cron: '0 21 * * *'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (use mock data)'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  TZ: 'Asia/Seoul'

jobs:
  generate-podcast:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install Python dependencies
        run: |
          uv pip install --system -r requirements.txt

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm install

      - name: Set up Google Cloud credentials
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        run: |
          mkdir -p credentials
          echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > credentials/service-account.json

      - name: Set up data directory
        run: |
          # GCS 기반이므로 로컬 데이터 디렉토리는 필요 없음
          # 하지만 테스트를 위해 임시 디렉토리 생성
          mkdir -p data/podcasts
          mkdir -p data/logs
          mkdir -p data/temp

      - name: Generate podcast episode
        env:
          # Google Cloud
          GOOGLE_APPLICATION_CREDENTIALS: ./credentials/service-account.json
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
          
          # AI Services
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          
          # Test mode
          TEST_MODE: ${{ inputs.test_mode || 'false' }}
        run: |
          # GCS 기반 데이터 저장을 위한 메인 파이프라인 실행
          python src/main.py

      - name: Run tests
        env:
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
          GOOGLE_APPLICATION_CREDENTIALS: ./credentials/service-account.json
        run: |
          # GCS 기반 테스트 실행
          python -m pytest tests/ -v --cov=src --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: coverage.xml
          flags: backend
          name: backend-coverage

  deploy-backend:
    needs: generate-podcast
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker
        run: |
          gcloud auth configure-docker

      - name: Build and push backend image
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/papercast-backend:${{ github.sha }} .
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/papercast-backend:${{ github.sha }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy papercast-backend \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/papercast-backend:${{ github.sha }} \
            --platform managed \
            --region asia-northeast3 \
            --allow-unauthenticated \
            --set-env-vars="GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }},GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/service-account.json" \
            --set-secrets="GCP_SERVICE_ACCOUNT_KEY=${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}:latest"

  deploy-frontend:
    needs: generate-podcast
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend
          npm install

      - name: Build frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.FRONTEND_API_URL }}
        run: |
          cd frontend
          npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend

  notify-success:
    needs: [generate-podcast, deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always() && (needs.generate-podcast.result == 'success')
    
    steps:
      - name: Notify Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#papercast'
          text: |
            🎉 오늘의 AI 논문 팟캐스트가 완성되었습니다!
            
            📅 날짜: $(date +%Y-%m-%d)
            🎧 지금 바로 들어보세요: ${{ secrets.FRONTEND_URL || 'https://papercast.vercel.app' }}
            📖 아카이브: ${{ secrets.FRONTEND_URL || 'https://papercast.vercel.app' }}/archive
            
            새로운 논문들이 기다리고 있습니다! 🚀
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack (Failure)
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#papercast'
          text: |
            ❌ 오늘의 AI 논문 팟캐스트 생성에 실패했습니다!
            
            📅 날짜: $(date +%Y-%m-%d)
            🔍 GitHub Actions 로그를 확인해주세요
            📖 기존 아카이브: ${{ secrets.FRONTEND_URL || 'https://papercast.vercel.app' }}/archive
            
            문제를 해결한 후 다시 시도해주세요! 🛠️
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}