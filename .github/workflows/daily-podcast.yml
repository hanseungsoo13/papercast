name: Daily Podcast Generation

on:
  schedule:
    # Runs every day at 21:00 UTC (06:00 KST next day)
    - cron: '0 21 * * *'
  
  workflow_dispatch:  # Allow manual trigger
    inputs:
      debug:
        description: 'Enable debug logging'
        required: false
        default: 'false'

jobs:
  generate-podcast:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Install dependencies
        run: |
          uv sync --frozen
      
      - name: Configure GCP credentials
        run: |
          echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" | base64 --decode > service-account-key.json
          # Verify the JSON is valid
          if ! python3 -m json.tool service-account-key.json > /dev/null 2>&1; then
            echo "Error: Invalid JSON in service-account-key.json"
            cat service-account-key.json
            exit 1
          fi
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/service-account-key.json" >> $GITHUB_ENV
      
      - name: Set environment variables
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
          echo "GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}" >> $GITHUB_ENV
          echo "TZ=Asia/Seoul" >> $GITHUB_ENV
          echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
      
      - name: Run podcast generation
        id: generate
        run: |
          output=$(uv run python src/main.py)
          echo "$output"
          
          # Extract podcast URL from output (format: "  Audio URL: {url}")
          podcast_url=$(echo "$output" | grep "Audio URL:" | sed 's/.*Audio URL: //' | xargs | head -n1)
          echo "podcast_url=$podcast_url" >> $GITHUB_OUTPUT
          echo "✅ Captured podcast URL: $podcast_url"
        continue-on-error: true
      
      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-logs
          path: data/logs/*.log
          retention-days: 7
      
      - name: Notify Slack on failure
        if: failure()
        continue-on-error: true
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data '{
                "text": "🚨 *PaperCast 생성 실패*\n• 날짜: $(date +%Y-%m-%d)\n• 시간: $(date +%H:%M:%S KST)\n• 로그를 확인해주세요."
              }'
          fi
      
      - name: Notify Slack on success
        if: success()
        continue-on-error: true
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            PODCAST_DATE=$(date +%Y-%m-%d)
            PODCAST_TIME=$(date +%H:%M:%S)
            PODCAST_URL="${{ steps.generate.outputs.podcast_url }}"
            
            # Debug: Print captured URL
            echo "📋 Captured URL from output: '$PODCAST_URL'"
            
            # Fallback if URL extraction failed
            if [ -z "$PODCAST_URL" ]; then
              echo "⚠️ URL extraction failed, using fallback URL"
              PODCAST_URL="https://storage.googleapis.com/${{ secrets.GCS_BUCKET_NAME }}/${PODCAST_DATE}/episode.mp3"
            fi
            
            echo "📤 Sending to Slack with URL: $PODCAST_URL"
            
            # Use jq to properly construct and escape JSON with public URL
            jq -n \
              --arg date "$PODCAST_DATE" \
              --arg time "$PODCAST_TIME" \
              --arg url "$PODCAST_URL" \
              '{
                text: "✅ *PaperCast 생성 완료!*\n• 날짜: \($date)\n• 시간: \($time) KST\n• <\($url)|🎧 팟캐스트 듣기>\n📚 새로운 AI 논문 팟캐스트를 들어보세요!"
              }' | \
            curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data @-
          fi
      
      - name: Clean up credentials
        if: always()
        run: |
          rm -f service-account-key.json
      
      - name: Report success
        if: success()
        run: |
          echo "::notice::Podcast generated successfully!"
          PODCAST_ID=$(date +%Y-%m-%d)
          echo "Podcast ID: $PODCAST_ID"


