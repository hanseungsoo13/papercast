name: Daily Podcast Generation

on:
  schedule:
    # Run every day at 6:00 AM KST (21:00 UTC)
    - cron: '0 21 * * *'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (use mock data)'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  TZ: 'Asia/Seoul'

jobs:
  generate-podcast:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install Python dependencies
        run: |
          cd backend
          uv pip install -r requirements.txt

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci

      - name: Set up Google Cloud credentials
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        run: |
          mkdir -p backend/credentials
          echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > backend/credentials/service-account.json

      - name: Set up PostgreSQL
        run: |
          sudo systemctl start postgresql
          sudo -u postgres psql -c "CREATE DATABASE papercast_test;"
          sudo -u postgres psql -c "CREATE USER papercast_user WITH PASSWORD 'test_password';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE papercast_test TO papercast_user;"

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://papercast_user:test_password@localhost:5432/papercast_test
        run: |
          cd backend
          alembic upgrade head

      - name: Generate podcast episode
        env:
          # Database
          DATABASE_URL: postgresql://papercast_user:test_password@localhost:5432/papercast_test
          
          # Google Cloud
          GOOGLE_APPLICATION_CREDENTIALS: ./credentials/service-account.json
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
          
          # AI Services
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          
          # Test mode
          TEST_MODE: ${{ inputs.test_mode || 'false' }}
        run: |
          cd backend
          python scripts/generate_episode.py

      - name: Run tests
        env:
          DATABASE_URL: postgresql://papercast_user:test_password@localhost:5432/papercast_test
        run: |
          cd backend
          pytest tests/ -v --cov=src --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage

  deploy-backend:
    needs: generate-podcast
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker
        run: |
          gcloud auth configure-docker

      - name: Build and push backend image
        run: |
          cd backend
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/papercast-backend:${{ github.sha }} .
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/papercast-backend:${{ github.sha }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy papercast-backend \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/papercast-backend:${{ github.sha }} \
            --platform managed \
            --region asia-northeast3 \
            --allow-unauthenticated \
            --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }},GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}"

  deploy-frontend:
    needs: generate-podcast
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.FRONTEND_API_URL }}
        run: |
          cd frontend
          npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend

  notify-success:
    needs: [generate-podcast, deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always() && (needs.generate-podcast.result == 'success')
    
    steps:
      - name: Notify Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#papercast'
          text: 'üéâ Daily Paper Cast episode generated successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack (Failure)
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#papercast'
          text: '‚ùå Daily Paper Cast episode generation failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}