name: Daily Podcast Generation

on:
  schedule:
    # Runs every day at 21:00 UTC (06:00 KST next day)
    - cron: '0 21 * * *'
  
  workflow_dispatch:  # Allow manual trigger
    inputs:
      debug:
        description: 'Enable debug logging'
        required: false
        default: 'false'

jobs:
  generate-podcast:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Configure GCP credentials
        run: |
          echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" | base64 --decode > service-account-key.json
          # Verify the JSON is valid
          if ! python3 -m json.tool service-account-key.json > /dev/null 2>&1; then
            echo "Error: Invalid JSON in service-account-key.json"
            cat service-account-key.json
            exit 1
          fi
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/service-account-key.json" >> $GITHUB_ENV
      
      - name: Set environment variables
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
          echo "GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}" >> $GITHUB_ENV
          echo "TZ=Asia/Seoul" >> $GITHUB_ENV
          echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
      
      - name: Run podcast generation
        id: generate
        run: |
          python src/main.py
        continue-on-error: true
      
      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-logs
          path: data/logs/*.log
          retention-days: 7
      
      - name: Notify Slack on failure
        if: failure()
        continue-on-error: true
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data '{
                "text": "üö® *PaperCast ÏÉùÏÑ± Ïã§Ìå®*\n‚Ä¢ Repository: ${{ github.repository }}\n‚Ä¢ Workflow: ${{ github.workflow }}\n‚Ä¢ Run ID: ${{ github.run_id }}\n‚Ä¢ Î°úÍ∑∏: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              }'
          fi
      
      - name: Notify Slack on success
        if: success()
        continue-on-error: true
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            PODCAST_DATE=$(date +%Y-%m-%d)
            PODCAST_URL="https://storage.googleapis.com/${{ secrets.GCS_BUCKET_NAME }}/${PODCAST_DATE}/episode.mp3"
            curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data "{
                \"text\": \"‚úÖ *PaperCast ÏÉùÏÑ± ÏôÑÎ£å!*\n‚Ä¢ ÎÇ†Ïßú: ${PODCAST_DATE}\n‚Ä¢ Repository: ${{ github.repository }}\n‚Ä¢ ÌåüÏ∫êÏä§Ìä∏: ${PODCAST_URL}\nüéß ÏÉàÎ°úÏö¥ AI ÎÖºÎ¨∏ ÌåüÏ∫êÏä§Ìä∏Î•º Îì§Ïñ¥Î≥¥ÏÑ∏Ïöî!\"
              }"
          fi
      
      - name: Clean up credentials
        if: always()
        run: |
          rm -f service-account-key.json
      
      - name: Report success
        if: success()
        run: |
          echo "::notice::Podcast generated successfully!"
          PODCAST_ID=$(date +%Y-%m-%d)
          echo "Podcast ID: $PODCAST_ID"


