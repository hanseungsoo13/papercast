name: Daily Podcast Generation

on:
  schedule:
    # Run every day at 6:00 AM KST (21:00 UTC)
    - cron: '0 21 * * *'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (use mock data)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  TZ: 'Asia/Seoul'

jobs:
  generate-podcast:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install Python dependencies
        run: |
          uv pip install --system -r requirements.txt

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm install

      - name: Set up Google Cloud credentials
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: |
          mkdir -p credentials
          printf "%s" "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > credentials/service-account.json
          
          # JSON 유효성 검사 (오류 발생 시 파일 내용 출력)
          if ! python3 -m json.tool credentials/service-account.json > /dev/null; then
            echo "❌ Invalid JSON after decoding. File content:"
            cat credentials/service-account.json
            exit 1
          fi
          
          echo "✅ GCP credentials setup successful"
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/credentials/service-account.json" >> $GITHUB_ENV

      - name: Set up data directory
        run: |
          # GCS 기반이므로 로컬 데이터 디렉토리는 필요 없음
          # 하지만 테스트를 위해 임시 디렉토리 생성
          mkdir -p data/podcasts
          mkdir -p data/logs
          mkdir -p data/temp

      - name: Generate podcast episode
        env:
          # Google Cloud
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
          
          # AI Services
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          
          # Test mode
          TEST_MODE: ${{ inputs.test_mode || 'false' }}
        run: |
          # Verify credentials file exists and is readable
          ls -la credentials/
          echo "File size: $(wc -c < credentials/service-account.json) bytes"
          echo "GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS"
          # GCS 기반 데이터 저장을 위한 메인 파이프라인 실행
          python src/main.py


  notify-on-success:
    # 팟캐스트 생성(generate-podcast) 잡에만 의존합니다.
    needs: [generate-podcast]
    runs-on: ubuntu-latest
    # generate-podcast 잡이 성공했을 때만 실행됩니다.
    if: success()

    steps:
      - name: Send success notification to Slack
        # SLACK_WEBHOOK_URL 시크릿이 설정된 경우에만 이 스텝을 실행합니다.
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          # 사용할 시크릿들을 환경 변수로 설정합니다.
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
        run: |
          # 팟캐스트 날짜와 GCS URL을 동적으로 생성합니다.
          PODCAST_DATE=$(date +%Y-%m-%d)
          PODCAST_URL="https://storage.googleapis.com/${GCS_BUCKET_NAME}/${PODCAST_DATE}/episode.mp3"
          
          # JSON 페이로드를 변수로 만들어 curl 명령을 깔끔하게 유지합니다.
          # Slack의 mrkdwn 형식을 사용합니다.
          JSON_PAYLOAD=$(cat <<EOF
          {
            "text": "✅ *PaperCast 생성 완료!*\n• 날짜: ${PODCAST_DATE}\n• 시간: $(date +'%H:%M:%S KST')\n• <${PODCAST_URL}|🎧 팟캐스트 듣기>\n📚 새로운 AI 논문 팟캐스트를 들어보세요!"
          }
          EOF
          )

          # curl 명령으로 슬랙에 POST 요청을 보냅니다.
          curl -X POST "${SLACK_WEBHOOK_URL}" \
            -H 'Content-type: application/json' \
            --data "${JSON_PAYLOAD}"

  notify-on-failure:
    needs: [generate-podcast]
    runs-on: ubuntu-latest
    # generate-podcast 잡이 실패했을 때만 실행됩니다.
    if: failure()

    steps:
      - name: Send failure notification to Slack
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          # 실패 로그를 바로 볼 수 있도록 GitHub Actions URL을 동적으로 만듭니다.
          ACTIONS_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          JSON_PAYLOAD=$(cat <<EOF
          {
            "text": "❌ *PaperCast 생성 실패!*\n• 날짜: $(date +%Y-%m-%d)\n• 시간: $(date +'%H:%M:%S KST')\n<${ACTIONS_URL}|🔍 GitHub Actions 로그 확인>"
          }
          EOF
          )

          curl -X POST "${SLACK_WEBHOOK_URL}" \
            -H 'Content-type: application/json' \
            --data "${JSON_PAYLOAD}"